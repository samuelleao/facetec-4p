{"version":3,"file":"SampleApp.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://SampleApp/./sampleAppController.js"],"sourcesContent":["SampleApp = (function () {\n    var latestEnrollmentIdentifier = \"\";\n    var latestProcessor;\n    var latestSessionResult = null;\n    var latestIDScanResult = null;\n    // Wait for onload to be complete before attempting to access the Browser SDK.\n    window.onload = function () {\n        SampleAppUtilities.formatUIForDevice();\n        // Set a the directory path for other FaceTec Browser SDK Resources.\n        FaceTecSDK.setResourceDirectory(\"../../core-sdk/FaceTecSDK.js/resources\");\n        // Set the directory path for required FaceTec Browser SDK images.\n        FaceTecSDK.setImagesDirectory(\"../../core-sdk/FaceTec_images\");\n        // Initialize FaceTec Browser SDK and configure the UI features.\n        Config.initializeFromAutogeneratedConfig(FaceTecSDK, function (initializedSuccessfully) {\n            if (initializedSuccessfully) {\n                onFaceTecSDKInitializationSuccess();\n            }\n            else {\n                onFaceTecSDKInitializationFailure();\n            }\n        });\n        SampleAppUtilities.fadeInMainUIContainer();\n    };\n    function onFaceTecSDKInitializationSuccess() {\n        SampleAppUtilities.enableControlButtons();\n        // Set your FaceTec Device SDK Customizations.\n        ThemeHelpers.setAppTheme(ThemeHelpers.getCurrentTheme());\n        // Set the sound files that are to be used for Vocal Guidance.\n        SampleAppUtilities.setVocalGuidanceSoundFiles();\n        // Set the strings to be used for group names, field names, and placeholder texts for the FaceTec ID Scan User OCR Confirmation Screen.\n        SampleAppUtilities.setOCRLocalization();\n        AdditionalScreens.setServerUpgradeStyling(document.getElementById(\"controls\"), exitAdditionalScreen);\n        DeveloperStatusMessages.logInitializeResult();\n    }\n    function onFaceTecSDKInitializationFailure() {\n        DeveloperStatusMessages.logInitializeResult();\n    }\n    // Clear previous session results;\n    function initializeResultObjects() {\n        latestSessionResult = null;\n        latestIDScanResult = null;\n    }\n    // Initiate a 3D Liveness Check.\n    function onLivenessCheckPressed() {\n        initializeResultObjects();\n        SampleAppUtilities.fadeOutMainUIAndPrepareForSession();\n        // Get a Session Token from the FaceTec SDK, then start the 3D Liveness Check.\n        getSessionToken(function (sessionToken) {\n            latestProcessor = new LivenessCheckProcessor(sessionToken, SampleApp);\n        });\n    }\n    // Initiate a 3D Liveness Check, then storing the 3D FaceMap in the Database, also known as \"Enrollment\".  A random enrollmentIdentifier is generated each time to guarantee uniqueness.\n    function onEnrollUserPressed() {\n        initializeResultObjects();\n        SampleAppUtilities.fadeOutMainUIAndPrepareForSession();\n        // Get a Session Token from the FaceTec SDK, then start the Enrollment.\n        getSessionToken(function (sessionToken) {\n            latestEnrollmentIdentifier = \"browser_sample_app_\" + SampleAppUtilities.generateUUId();\n            latestProcessor = new EnrollmentProcessor(sessionToken, SampleApp);\n        });\n    }\n    // Perform 3D to 3D Verification against the Enrollment previously performed.\n    function onVerifyUserPressed() {\n        initializeResultObjects();\n        // For demonstration purposes, verify that we have an enrollmentIdentifier to Verify against.\n        if (latestEnrollmentIdentifier.length === 0) {\n            DeveloperStatusMessages.logAndDisplayMessage(\"Please enroll first before trying verification.\");\n        }\n        else {\n            SampleAppUtilities.fadeOutMainUIAndPrepareForSession();\n            // Get a Session Token from the FaceTec SDK, then start the 3D to 3D Matching.\n            getSessionToken(function (sessionToken) {\n                latestProcessor = new VerificationProcessor(sessionToken, SampleApp);\n            });\n        }\n    }\n    // Perform a 3D Liveness Check, then an ID Scan, then Match the 3D FaceMap to the ID Scan.\n    function onPhotoIDMatchPressed() {\n        initializeResultObjects();\n        SampleAppUtilities.fadeOutMainUIAndPrepareForSession();\n        // Get a Session Token from the FaceTec SDK, then start the 3D Liveness Check.  On Success, ID Scanning will start automatically.\n        getSessionToken(function (sessionToken) {\n            latestEnrollmentIdentifier = \"browser_sample_app_\" + SampleAppUtilities.generateUUId();\n            latestProcessor = new PhotoIDMatchProcessor(sessionToken, SampleApp);\n        });\n    }\n    // Perform Photo ID Scan, generating a username each time to guarantee uniqueness.\n    function onPhotoIDScanPressed() {\n        initializeResultObjects();\n        SampleAppUtilities.fadeOutMainUIAndPrepareForSession();\n        // Get a Session Token from the FaceTec SDK, then start the 3D Liveness Check.  On Success, ID Scanning will start automatically.\n        getSessionToken(function (sessionToken) {\n            latestProcessor = new PhotoIDScanProcessor(sessionToken, SampleApp);\n        });\n    }\n    // Show the final result with the Session Review Screen.\n    var onComplete;\n    onComplete = function (sessionResult, idScanResult, latestNetworkResponseStatus) {\n        latestSessionResult = sessionResult;\n        latestIDScanResult = idScanResult;\n        if (latestProcessor.isSuccess()) {\n            // Display message to user, Success messages are already logged from the processors.\n            DeveloperStatusMessages.displayMessage(\"See logs for details\");\n        }\n        else {\n            // Log result for unSuccess Sessions.\n            DeveloperStatusMessages.logScanOncompleteResult(sessionResult, idScanResult);\n            // Check for server offline\n            if (isNetworkResponseServerIsOffline(latestNetworkResponseStatus) === true) {\n                showAdditionalScreensServerIsDown();\n                return;\n            }\n        }\n        SampleAppUtilities.showMainUI();\n    };\n    // Check for server down status\n    function isNetworkResponseServerIsOffline(networkResponseStatus) {\n        return (networkResponseStatus >= 500);\n    }\n    // Set a new customization for FaceTec Browser SDK.\n    function onDesignShowcasePressed() {\n        ThemeHelpers.showNewTheme();\n    }\n    function onVocalGuidanceSettingsButtonPressed() {\n        SampleAppUtilities.setVocalGuidanceMode();\n    }\n    // Display audit trail images captured from user's last FaceTec Browser SDK Session (if available).\n    function onViewAuditTrailPressed() {\n        SampleAppUtilities.showAuditTrailImages(latestSessionResult, latestIDScanResult);\n    }\n    var sessionTokenErrorHasBeenHandled = false;\n    function onSessionTokenError(xhrStatus) {\n        if (sessionTokenErrorHasBeenHandled === false) {\n            sessionTokenErrorHasBeenHandled = true;\n            if (xhrStatus !== undefined && isNetworkResponseServerIsOffline(xhrStatus)) {\n                showAdditionalScreensServerIsDown();\n            }\n            else {\n                onServerSessionTokenError();\n            }\n        }\n    }\n    // Get the Session Token from the server\n    function getSessionToken(sessionTokenCallback) {\n        sessionTokenErrorHasBeenHandled = false;\n        try {\n            var XHR = new XMLHttpRequest();\n            XHR.open(\"GET\", Config.BaseURL + \"/session-token\");\n            XHR.setRequestHeader(\"X-Device-Key\", Config.DeviceKeyIdentifier);\n            XHR.setRequestHeader(\"X-User-Agent\", FaceTecSDK.createFaceTecAPIUserAgentString(\"\"));\n            XHR.onreadystatechange = function () {\n                if (this.readyState === XMLHttpRequest.DONE) {\n                    var sessionToken = \"\";\n                    try {\n                        // Attempt to get the sessionToken from the response object.\n                        sessionToken = JSON.parse(this.responseText).sessionToken;\n                        // Something went wrong in parsing the response. Return an error.\n                        if (typeof sessionToken !== \"string\") {\n                            onSessionTokenError(XHR.status);\n                            return;\n                        }\n                    }\n                    catch (_a) {\n                        // Something went wrong in parsing the response. Return an error.\n                        XHR.abort();\n                        onSessionTokenError(XHR.status);\n                        return;\n                    }\n                    SampleAppUtilities.hideLoadingSessionToken();\n                    sessionTokenCallback(sessionToken);\n                }\n            };\n            // Wait 3s, if the request is not completed yet, show the session token loading screen\n            window.setTimeout(function () {\n                if (XHR.readyState !== XMLHttpRequest.DONE) {\n                    if (sessionTokenErrorHasBeenHandled === false) {\n                        SampleAppUtilities.showLoadingSessionToken();\n                    }\n                }\n            }, 3000);\n            XHR.onerror = function () {\n                XHR.abort();\n                onSessionTokenError(XHR.status);\n            };\n            XHR.send();\n        }\n        catch (e) {\n            onSessionTokenError(undefined);\n        }\n    }\n    function showAdditionalScreensServerIsDown() {\n        AdditionalScreens.showServerUpGradeView();\n    }\n    function onServerSessionTokenError() {\n        SampleAppUtilities.handleErrorGettingServerSessionToken();\n    }\n    var getLatestEnrollmentIdentifier = function () {\n        return latestEnrollmentIdentifier;\n    };\n    var clearLatestEnrollmentIdentifier = function () {\n        latestEnrollmentIdentifier = \"\";\n    };\n    function exitAdditionalScreen() {\n        AdditionalScreens.exitAdditionalScreen(SampleAppUtilities.showMainUI);\n    }\n    return {\n        onLivenessCheckPressed: onLivenessCheckPressed,\n        onEnrollUserPressed: onEnrollUserPressed,\n        onVerifyUserPressed: onVerifyUserPressed,\n        onPhotoIDMatchPressed: onPhotoIDMatchPressed,\n        onPhotoIDScanPressed: onPhotoIDScanPressed,\n        onDesignShowcasePressed: onDesignShowcasePressed,\n        onComplete: onComplete,\n        getLatestEnrollmentIdentifier: getLatestEnrollmentIdentifier,\n        clearLatestEnrollmentIdentifier: clearLatestEnrollmentIdentifier,\n        onVocalGuidanceSettingsButtonPressed: onVocalGuidanceSettingsButtonPressed,\n        onViewAuditTrailPressed: onViewAuditTrailPressed,\n        latestSessionResult: latestSessionResult,\n        latestIDScanResult: latestIDScanResult\n    };\n})();\n"],"names":[],"sourceRoot":""}